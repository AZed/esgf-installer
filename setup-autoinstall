#!/bin/bash
mkfifo /tmp/inputpipe
mkfifo /tmp/outputpipe
sleep 7200 >/tmp/inputpipe &
proc=$!
declare -A va
trap ctrl_c INT
function ctrl_c(){
	echo "got a ctrl-c. Cleaning up.";
	kill -9 $proc;
	rm -f /tmp/outputpipe;
	rm -f /tmp/inputpipe;
	rm -f /tmp/answers;
	exit 0;
}
function get_double_entry(){
	local l1
	local l2
	while [ 1 ]; do
		read -e -p "Enter $1: " l1
		read -e -p "Re-enter $1: " l2
		if [ "$l1" != "$l2" ]; then
			continue;
			else break;
		fi
	done
	echo "$l1";
}
function get_entry(){
	local l1
	read -e -p "Enter $1: " l1;
	echo "$l1";
}

function load_pipe(){
	if [ $tosave -eq 1 ]; then
		mkdir -p /opt/esgf
		cp /tmp/answers /opt/esgf
	fi
	numprompts=`cat /tmp/answers|wc -l`;
	numpauses=`cat /tmp/answers|grep pause|wc -l`;
	numprompts=`expr $numprompts - $numpauses`;
	promptct=0
	while read line; do
		ans=`echo $line|cut -d ':' -f1`;
		if [ "$ans" = "blank" ]; then
			ans="";
		fi
		if [ "$ans" = "pause" ]; then
			echo "Now waiting for ping-back from the globus-installer.";
			cat </tmp/outputpipe
			continue;
		fi
		promptct=`expr $promptct + 1`;
		echo "$ans" >/tmp/inputpipe
		echo "Answered question $promptct of $numprompts";
	done</tmp/answers
	echo "All prompts have now been answered. Do not terminate this script till the installation completes fully.";
	while [ 1 ]; do
		sleep 2;
	done
}
echo "Do you wish to save the answer file from this questionnaire for later use? (n/Y)"
read choice;
tosave=0
if [ "$choice" = "y" -o "$choice" = "Y" ]; then
	echo "Your choices will be stored in /opt/esgf/answers";
	tosave=1;
fi
echo "Do you wish to load in an answer file from an earlier run? (y/N)"
read choice;
if [ "$choice" = "y" -o "$choice" = "Y" ]; then
	while [ 1 ]; do
		echo "Provide path to answer file";
		read anspath;
		if [ -s $anspath ]; then
			break;
		fi
		echo "File $anspath does not exist";
	done
	cp $anspath /tmp/answers;
	echo "Ready with the answers. You can now run the installer with a </tmp/inputpipe";
	echo "Use CTRL-C at the end of the install, to cleanup.";
	load_pipe
fi
ip addr show|grep -w inet|grep -v 127.0.0.1|awk '{print $2}'|cut -d '/' -f1 >ips
declare -A ipaddrs
numl=`cat ips|wc -l`;
ct=0
if [ $numl -gt 1 ]; then
	for (( num=1; num<=$numl; num++ )); do
		ip=`cat ips|head -$num|tail -1`;
		ipaddrs[$ct]=$ip;
		ct=`expr $ct + 1`;
	done
	while [ 1 ]; do
		echo "The following ip addresses were found configured on this machine. Specify which is to be used.";
		for n in ${!ipaddrs[@]}; do
			echo  "[$n] ${ipaddrs[$n]}";
		done
		read choice;
		invalid=1;
		for n in ${!ipaddrs[@]}; do
			if [ "$n" = "$choice" ]; then
				invalid=0;
				break;
			fi
		done
		if [ $invalid -eq 1 ]; then
			echo "Invalid choice. Try again";
			continue;
		else
			break;
		fi
	done

vl=('ipchoice' 'fix-1' 'fqdn' 'adminpass' 'fix-2' 'orgname' 'shortname' 'longname' 'revdomain' 'peergroup' 'defaultpeer'
'publishendpoint' 'email' 'fix-3' 'fix-4' 'fix-5' 'publisherpassword' 'fix-6' 'fix-7' 'fix-8' 'fix-9' 'fix-10'
'fix-11' 'fix-12' 'fix-14' 'fix-15' 'fix-16' 'fix-17' 'fix-18' 'fix-19' 'fix-20' 'fix-21' 'fix-22' 'globususername'
'globuspassword' 'fix-23' 'fix-24' 'fix-25' 'fix-26' 'fix-27' 'fix-28')
	va['ipchoice']=$choice;
	else
vl=('fix-1' 'fqdn' 'adminpass' 'fix-2' 'orgname' 'shortname' 'longname' 'revdomain' 'peergroup' 'defaultpeer'
'publishendpoint' 'email' 'fix-3' 'fix-4' 'fix-5' 'publisherpassword' 'fix-6' 'fix-7' 'fix-8' 'fix-9' 'fix-10'
'fix-11' 'fix-12' 'fix-14' 'fix-15' 'fix-16' 'fix-17' 'fix-18' 'fix-19' 'fix-20' 'fix-21' 'fix-22' 'globususername'
'globuspassword' 'fix-23' 'fix-24' 'fix-25' 'fix-26' 'fix-27' 'fix-28')
fi
numprompts=${#vl[@]}
va['fix-1']='y'
va['fqdn']=`get_entry 'fqdn'`
va['adminpass']=`get_double_entry 'admin-password'`
va['fix-2']=${va['adminpass']}
va['orgname']=`get_entry 'orgname'`
va['shortname']=`get_entry 'shortname'`
va['longname']=`get_entry 'longname'`
va['revdomain']=`get_entry 'revdomain'`
va['peergroup']=`get_entry 'peergroup'`
va['defaultpeer']=`get_entry 'defaultpeer'`
va['publishendpoint']=`get_entry 'publishendpoint'`
va['email']=`get_entry 'admin-email'`
va['fix-3']='n'
va['fix-4']='blank'
va['fix-5']='blank'
va['publisherpassword']=`get_entry 'publisher password'`
va['fix-6']=${va['adminpass']}
va['fix-7']=${va['adminpass']}
va['fix-8']='blank'
va['fix-9']='blank'
va['fix-10']='y'
va['fix-11']=${va['orgname']}
va['fix-12']='y'
#va['fix-13']='y'
va['fix-14']=${va['adminpass']}
va['fix-15']=${va['adminpass']}
va['fix-16']='blank'
va['fix-17']='blank'
va['fix-18']='n'
va['fix-19']='blank'
va['fix-20']='blank'
va['fix-21']='pause'
va['fix-22']='y'
va['globususername']=`get_entry 'globus-username'`
va['globuspassword']=`get_entry 'globus-password'`
va['fix-23']='pause'
va['fix-24']='y'
va['fix-25']=${va['globususername']}
va['fix-26']=${va['globuspassword']}
va['fix-27']='y'
va['fix-28']='y'
echo -n >/tmp/answers;
for val in ${vl[@]}; do
	ans=${va[$val]}
	echo $ans:$val >>/tmp/answers;
done
echo "Ready with the answers. You can now run the installer with a </tmp/inputpipe";
echo "Use CTRL-C at the end of the install, to cleanup.";
load_pipe
